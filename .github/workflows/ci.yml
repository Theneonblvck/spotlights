```yaml
# .github/workflows/ci.yml

name: Python Spotlight GUI CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Or your preferred Python version
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8
        run: flake8 .

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11'] # Test across a few Python versions

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies (shared)
        run: |
          python -m pip install --upgrade pip
          # Add any universal dependencies here if needed (e.g. for mock)
          pip install pytest pytest-asyncio # pytest-asyncio for async tests

      - name: Install macOS-specific dependencies
        if: matrix.os == 'macos-latest'
        run: |
          pip install pyobjc pyside6 # Install PyObjC and a Qt binding for macOS tests

      - name: Run tests
        # Navigate into the spotlight_app directory for tests
        working-directory: ./spotlight_app
        run: |
          # The __main__.py self-tests are executed via `python -m`
          # These are simple stubs, full pytest suites would be in `tests/`
          echo "Running utility module tests..."
          python -m spotlight_gui.utils.async_subprocess
          python -m spotlight_gui.utils.checks

          echo "Running core abstraction layer tests..."
          python -m spotlight_gui.core.commands
          python -m spotlight_gui.core.api_objc

          echo "Running UI baseline tests (basic launch check)..."
          # UI tests are often more complex. For CI, a simple import/instantiation
          # or a "smoke test" might be sufficient without full UI interaction.
          # These commands will launch the UI briefly then exit (as they are in if __name__ == '__main__' blocks).
          # On non-macOS, the UI self-tests are guarded and will exit early.
          python -m spotlight_gui.ui.tk_app || true # Allow failure on non-macOS
          python -m spotlight_gui.ui.qt_app || true # Allow failure if Qt not present/fails

          # If you had dedicated pytest files in a `tests/` directory:
          # pytest tests/
        env:
          # Set a dummy HOME for non-macOS runners if needed to avoid user-specific paths
          HOME: /tmp/home-dummy
```